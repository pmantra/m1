# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from maven_schemas.eligibility import pre_eligibility_pb2 as pre__eligibility__pb2


class PreEligibilityServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """
        Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CheckPreEligibility = channel.unary_unary(
            '/maven.pre_eligibility.pre_eligibility.PreEligibilityService/CheckPreEligibility',
            request_serializer=pre__eligibility__pb2.PreEligibilityRequest.SerializeToString,
            response_deserializer=pre__eligibility__pb2.PreEligibilityResponse.FromString,
        )


class PreEligibilityServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CheckPreEligibility(self, request, context):
        """
        Soft check to determine if user has potential or existing eligibility
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PreEligibilityServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'CheckPreEligibility': grpc.unary_unary_rpc_method_handler(
            servicer.CheckPreEligibility,
            request_deserializer=pre__eligibility__pb2.PreEligibilityRequest.FromString,
            response_serializer=pre__eligibility__pb2.PreEligibilityResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'maven.pre_eligibility.pre_eligibility.PreEligibilityService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))

# This class is part of an EXPERIMENTAL API.


class PreEligibilityService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CheckPreEligibility(request,
                            target,
                            options=(),
                            channel_credentials=None,
                            call_credentials=None,
                            insecure=False,
                            compression=None,
                            wait_for_ready=None,
                            timeout=None,
                            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/maven.pre_eligibility.pre_eligibility.PreEligibilityService/CheckPreEligibility',
                                             pre__eligibility__pb2.PreEligibilityRequest.SerializeToString,
                                             pre__eligibility__pb2.PreEligibilityResponse.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
