import datetime
import json
from copy import copy
from unittest.mock import ANY

import pytest

from common.health_profile.health_profile_service_models import Modifier
from health.domain.add_profile import add_profile_to_user


@pytest.fixture
def expected_health_profile():
    """
    autogenerated health profile structure for factories.DefaultUser
    """
    return {
        "due_date": ANY,
        "children": [{"id": ANY, "name": ANY, "birthday": ANY}],
        "child_auto_added_at": ANY,
        "fertility_treatment_status": ANY,
    }


class TestPatchHealthProfile:
    def test_invalid_user_403s(self, default_user, client, api_helpers, factories):
        res = client.patch(
            f"/api/v1/users/{default_user.id}/health_profile",
            headers=api_helpers.json_headers(default_user),
            data=json.dumps({}),
        )
        assert res.status_code == 200
        second_user = factories.DefaultUserFactory.create()
        res = client.patch(
            f"/api/v1/users/{default_user.id}/health_profile",
            headers=api_helpers.json_headers(second_user),
            data=json.dumps({}),
        )
        assert res.status_code == 403

    def test_add_invalid_type_data(self, default_user, client, api_helpers):
        # coverage here overlaps with test_health_profile_validation.py
        res = client.patch(
            f"/api/v1/users/{default_user.id}/health_profile",
            headers=api_helpers.json_headers(default_user),
            data=json.dumps({"height": "not an integer"}),
        )
        assert res.status_code == 400

    def test_add_invalid_member_birthday_data(self, default_user, client, api_helpers):
        res = client.patch(
            f"/api/v1/users/{default_user.id}/health_profile",
            headers=api_helpers.json_headers(default_user),
            data=json.dumps(
                {
                    "birthday": (
                        datetime.date.today() + datetime.timedelta(weeks=2)
                    ).isoformat()
                }
            ),
        )
        assert res.status_code == 400

    def test_add_invalid_child_birthday_data(self, default_user, client, api_helpers):
        res = client.patch(
            f"/api/v1/users/{default_user.id}/health_profile",
            headers=api_helpers.json_headers(default_user),
            data=json.dumps(
                {
                    "children": [
                        {"a child without a birthday": "fails"},
                        {"as does": "this", "birthday": "not a birthday"},
                    ]
                }
            ),
        )
        assert res.status_code == 400

    def test_valid_partial_edit(
        self,
        client,
        api_helpers,
        default_user,
        expected_health_profile,
        empty_health_profile,
        patch_braze_send_event,
    ):
        initial_profile = client.get(
            f"/api/v1/users/{default_user.id}/health_profile",
            headers=api_helpers.json_headers(default_user),
        )
        assert initial_profile.json == expected_health_profile

        empty_health_profile.update(
            {
                "life_stage": 1,
                "miscarriages": 2,
                "number_of_pregnancies": 3,
                "sex_at_birth": "male",
            }
        )
        new_data = empty_health_profile
        res = client.patch(
            f"/api/v1/users/{default_user.id}/health_profile",
            headers=api_helpers.json_headers(default_user),
            data=json.dumps(new_data),
        )
        assert res.status_code == 200
        assert res.json == {**expected_health_profile, **new_data}
        patch_braze_send_event.assert_called_once_with(
            user=default_user,
            event_name="biological_sex",
            user_attributes={"biological_sex": "male"},
        )

    def test_invalid_date_edits(
        self, client, api_helpers, default_user, expected_health_profile
    ):
        initial_profile = client.get(
            f"/api/v1/users/{default_user.id}/health_profile",
            headers=api_helpers.json_headers(default_user),
        )
        assert initial_profile.json == expected_health_profile

        bad_data = copy(initial_profile.json)
        # set birthday to the future
        bad_data["children"][0]["birthday"] = (
            (datetime.datetime.now() + datetime.timedelta(days=1)).date().isoformat()
        )
        res = client.patch(
            f"/api/v1/users/{default_user.id}/health_profile",
            headers=api_helpers.json_headers(default_user),
            data=json.dumps(bad_data),
        )
        assert res.status_code == 400

    def test_invalid_data_multiple_errors(self, client, api_helpers, default_user):
        bad_data = {
            "life_stage": 110,  # current life_stage valid values are 1 or 2
            "birthday": (datetime.datetime.now() + datetime.timedelta(days=100))
            .date()
            .isoformat(),  # future birthday
        }
        res = client.patch(
            f"/api/v1/users/{default_user.id}/health_profile",
            headers=api_helpers.json_headers(default_user),
            data=json.dumps(bad_data),
        )
        assert res.status_code == 400
        assert res.json == {
            # prev. 'error': "['Invalid life stages id: 110']",
            "error": {
                "birthday": ["Your birthday should be in the past!"],
                "life_stage": ["Invalid life stages id: 110"],
            },
            # prev.'errors': [{'detail': "['Invalid life stages id: 110']", 'status': 400, 'title': 'Bad Request'}]
            "errors": [
                {
                    "detail": "Invalid life stages id: 110",
                    "field": "life_stage",
                    "status": 400,
                    "title": "Bad Request",
                },
                {
                    "detail": "Your birthday should be in the past!",
                    "field": "birthday",
                    "status": 400,
                    "title": "Bad Request",
                },
            ],
            "status_code": 400,
        }

    def test_add_valid_type_data(
        self, client, api_helpers, factories, empty_health_profile
    ):
        user = factories.DefaultUserFactory.create(health_profile=None)
        add_profile_to_user(user)
        res = client.get(
            f"/api/v1/users/{user.id}/health_profile",
            headers=api_helpers.json_headers(user),
        )
        assert res.status_code == 200
        assert res.json == {}
        # add data
        empty_health_profile.update(
            {
                "height": 64,
                "weight": 130,
                "due_date": (
                    datetime.date.today() + datetime.timedelta(weeks=5)
                ).isoformat(),
                "children": [
                    {
                        "name": "Child Name",
                        "birthday": (
                            datetime.date.today() - datetime.timedelta(weeks=13)
                        ).isoformat(),
                    }
                ],
            }
        )
        profile_data = empty_health_profile
        res = client.patch(
            f"/api/v1/users/{user.id}/health_profile",
            headers=api_helpers.json_headers(user),
            data=json.dumps(profile_data),
        )
        assert res.status_code == 200
        profile_data["children"][0]["id"] = ANY
        assert res.json == profile_data

    def test_update_biological_sex__no_change(
        self,
        client,
        api_helpers,
        default_user,
        empty_health_profile,
        expected_health_profile,
        patch_braze_send_event,
    ):
        default_user.health_profile.json["sex_at_birth"] = "Female"

        empty_health_profile["sex_at_birth"] = "Female"
        expected_health_profile.pop("fertility_treatment_status")

        data = empty_health_profile
        res = client.patch(
            f"/api/v1/users/{default_user.id}/health_profile",
            headers=api_helpers.json_headers(default_user),
            data=json.dumps(data),
        )
        assert res.json == {**expected_health_profile, **data}
        assert res.status_code == 200
        patch_braze_send_event.assert_not_called()

    def test_due_date_update_triggers_hps_call(
        self,
        client,
        api_helpers,
        default_user,
        empty_health_profile,
        expected_health_profile,
        mock_health_profile_service,
    ):
        # get old due date
        mock_health_profile_service.get_fertility_treatment_status.return_value = None
        initial_profile = client.get(
            f"/api/v1/users/{default_user.id}/health_profile",
            headers=api_helpers.json_headers(default_user),
        )
        assert initial_profile.json == expected_health_profile
        old_due_date = initial_profile.json["due_date"]

        # update to new due date
        new_due_date = datetime.date.fromisoformat(old_due_date) + datetime.timedelta(
            days=10
        )
        empty_health_profile.update({"due_date": new_due_date.isoformat()})
        new_data = empty_health_profile
        res = client.patch(
            f"/api/v1/users/{default_user.id}/health_profile",
            headers=api_helpers.json_headers(default_user),
            data=json.dumps(new_data),
        )
        assert res.status_code == 200
        assert res.json == {**expected_health_profile, **new_data}

        # verify call to HPS happened
        modifier = Modifier(
            id=default_user.id,
            name=default_user.full_name,
            role="member",
        )
        mock_health_profile_service.update_due_date_in_hps.assert_called_once_with(
            new_due_date, modifier
        )

        # verify due date is updated in mono
        updated_profile = client.get(
            f"/api/v1/users/{default_user.id}/health_profile",
            headers=api_helpers.json_headers(default_user),
        )
        assert updated_profile.json["due_date"] == new_due_date.isoformat()

    def test_no_hps_call_when_no_due_date_update(
        self,
        client,
        api_helpers,
        default_user,
        empty_health_profile,
        expected_health_profile,
        mock_health_profile_service,
    ):
        # get old due date
        mock_health_profile_service.get_fertility_treatment_status.return_value = None
        initial_profile = client.get(
            f"/api/v1/users/{default_user.id}/health_profile",
            headers=api_helpers.json_headers(default_user),
        )
        assert initial_profile.json == expected_health_profile
        existing_due_date = initial_profile.json["due_date"]

        # update to new due date
        empty_health_profile.update({"height": 64})
        new_data = empty_health_profile
        res = client.patch(
            f"/api/v1/users/{default_user.id}/health_profile",
            headers=api_helpers.json_headers(default_user),
            data=json.dumps(new_data),
        )
        assert res.status_code == 200
        assert res.json == {**expected_health_profile, **new_data}

        # verify no call to HPS
        mock_health_profile_service.update_due_date_in_hps.assert_not_called()

        # verify due date is not updated in mono
        updated_profile = client.get(
            f"/api/v1/users/{default_user.id}/health_profile",
            headers=api_helpers.json_headers(default_user),
        )
        assert updated_profile.json["due_date"] == existing_due_date
