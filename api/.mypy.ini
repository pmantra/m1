# ------------------------------------------------------------------------------
# Global options:
# https://mypy.readthedocs.io/en/stable/config_file.html#confval-mypy_path

[mypy]
mypy_path = api
plugins = sqlmypy

# ------------------------------------------------------------------------------
# Global Rules:

# Many of our imports do not provide type hint information. Disable this to
# identify dependencies.
ignore_missing_imports = True

# When mypy attempts to resolve the type information of an imported module it
# will fall back to type: "Any" if the import is not found. We dont install from
# the poetry lock file due to limitations with pre-commit cache invalidation so
# stubs are included manually. This flag dramatically reduces the scope of
# mistakes that can be caught at analysis time. By enabling this setting we fore
# an error of`no-any-unimported` which makes the implicit Any visible. Due to
# the breadth of errors this flag creates and the effort it takes to resolve
# each, we keep it disabled until we encounter a critical oversight. In response
# we flip this flag then resolve the import issue. In the future we would benefit
# from adding a line-by-line override but that is too much overhead for now.
disallow_any_unimported = False

# Disallows defining functions without type annotations or with incomplete type
# annotations (a superset of disallow_incomplete_defs). For example, it would
# report an error for def f(a, b) and def f(a: int, b).
disallow_untyped_defs = True

# PEP 484 prohibits implicit Optional.
no_implicit_optional = True

# These are all the error codes that appear in the
# codebase as of 12/2023. Below you will find the reasoning for keeping or
# ignoring each.
# https://mypy.readthedocs.io/en/stable/error_code_list.html#error-codes-enabled-by-default
#
# arg-type
# catches issues when a function returns an optional that is then it is passed
# to another func as a non-optional. This is a source of unexpected runtime
# errors. If a property is accessed on the optional it will throw an exception.
# This is particularly problamatic in schemas as exceptions are swollowed there.
#
# assignment
# Catches when a variable is assigned a value of the wrong type. It greatoy
# decreases runtime errors by keeping a var the same type.
#
# attr-defined
# This is a high signal error. It catches when an expected attribute is
# accessed but not available. This often occurs by incorrectly assuming the
# type of a var. Can be caused by `assignment` errors.
#
# call-arg
# High signal error. This will fail during execution. The args provided do not
# match the destination function signature.
#
# call-overload
# Identifies when passed argument types do not match any of the overloaded
# options. This will likely produce unexpected runtime behavior.
#
# date
# Identifies when we are doing opertaions with dates that could be invalid. An
# example is adding a time duration to a nullable date col of a model.
# Additionally it forces a developer to guard an optional before accessing
# methods on a date.
#
# dict-item [disabled]
# The flexability of dictionaries makes this less critical to catch. There are
# very few of these reported errors in the current codebase (12/2023) and they
# look to be low to no value changes.
#
# has-type
# Reviewing the current errors, this looks to be something important to
# investigate. Caught errors show properties being accessed that disagree with
# the explicitly defined type hint.
#
# index
# This is a good check to have in place. The single error found in the codebase
# is a false positive that can be rectified with an added type hint. It checks
# that the indexed value in indexing operation such as x[y] supports indexing.
#
# int
# This catches potential errors in math operations. An example is multiplying an
# int * Optional[int]. If the optional is None, there will be a runtime
# exception (TypeError).
#
# misc
# This code covers less common failing checks that donâ€™t have specific error
# codes. Due to the unexpected noise this could create we are opting to disable
# this for now. If an incident is shown to have been avoidable with this on we
# can revisit.
#
# name-defined
# Code would likely hard fail if the target is not resolved. Leave in place to
# provide developers an explicit line number of the mistake instead of relying
# on tests to hit the issue.
#
# no-redef
# Great check to improve readability and reduce suprise bugs.
#
# operator [disabled]
# Low signal error. Reviewing the current failure they look to be false
# positives. Checks that operands support a binary or unary operation, such as +
# or ~.
#
# return-value
# This check would foce us to produce more consistent and well type hinted code.
# The signal it produces is rarely required for successful runtime operation.
#
# return
# The inclusion of this check is debateable. From review of the current errors,
# there are 2 main cases. The first is when a function that defines a
# non-optional return type contains paths that do not explicitly return some
# value, implying a return None. The other which provides no value is a
# properlly annotated function with Optional return type implicitly returns
# None. This second case appears very rarely in our code base. Because the
# developer effort to resolve this error is extreamly low and the value gained
# by ensuring the return type matches the annotation we should reatin this
# check.
#
# syntax
# The value that type annotations provide cannot be realized if the syntax is
# invalid.
#
# valid-type
# This is important to ensure that the type hints are valid.
#
# var-annotated [disabled]
# This is a nice to have that improves introspection by mypy. It does not create
# direct value to the code author.

# See detailed reasoning above for why these are disabled.
disable_error_code = misc, dict-item, operator, var-annotated

# ------------------------------------------------------------------------------
# Test Rules:

# Initially we will exclude all test files. This insures the maximum flexability
# and least character overhead in test implementation.

# Disable checking in pytests folders
[mypy-pytests.*]
ignore_errors = True
disallow_any_unimported = False
[mypy-*.pytests.*]
ignore_errors = True
disallow_any_unimported = False

# Disable checking in www_tests folder
[mypy-www_tests.*]
ignore_errors = True
[mypy-*.www_tests.*]
ignore_errors = True


[mypy-tests.*]
ignore_errors = True
disallow_any_unimported = False
[mypy-api.tests.*]
ignore_errors = True
disallow_any_unimported = False

# Migrations:
# These errors appear in a high volume. They should be addressed by the owning
# team when they define.
[mypy-*.migrations.*]
disable_error_code = assignment, call-overload, call-arg, no-untyped-def
[mypy-*.migrations.audit-versions.*]
disable_error_code = assignment, call-overload, call-arg, no-untyped-def


# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# Per Team Rules:

# Wallet:
# These errors appear in a high volume. They should be addressed by the owning
# team when they define.
[mypy-wallet.*]
disable_error_code = union-attr, valid-type, assignment
[mypy-*.wallet.*]
disable_error_code = union-attr, valid-type, assignment

# Admin:
[mypy-api.admin.*]
# These errors appear in a high volume. They should be addressed by the owning
# team when they define.

# Activity:
[mypy-*.activity.*]
no_implicit_optional = True
disallow_untyped_defs = True

# Admin:
[mypy-*.admin.*]
no_implicit_optional = True
disallow_untyped_defs = True

# Airflow:
[mypy-*.airflow.*]
no_implicit_optional = True
disallow_untyped_defs = True

# Appointments:
[mypy-*.appointments.*]
no_implicit_optional = True
disallow_untyped_defs = True
# Assessments:
[mypy-*.assessments.*]
no_implicit_optional = True
disallow_untyped_defs = True

# Audit Log:
[mypy-*.audit_log.*]
no_implicit_optional = True
disallow_untyped_defs = True

# Authn:
[mypy-*.authn.*]
no_implicit_optional = True
disallow_untyped_defs = True

# Authz:
[mypy-*.authz.*]
no_implicit_optional = True
disallow_untyped_defs = True

# Benchmark:
[mypy-*.benchmark.*]
no_implicit_optional = True
disallow_untyped_defs = True

# BMS:
[mypy-*.bms.*]
no_implicit_optional = True
disallow_untyped_defs = True

# BQ ETL:
[mypy-*.bq_etl.*]
no_implicit_optional = True
disallow_untyped_defs = True

# Braze:
[mypy-*.braze.*]
no_implicit_optional = True
disallow_untyped_defs = True

# Build Scripts:
[mypy-*.build-scripts.*]
no_implicit_optional = True
disallow_untyped_defs = True

# Caching:
[mypy-*.caching.*]
no_implicit_optional = True
disallow_untyped_defs = True

# Care Advocates:
[mypy-*.care_advocates.*]
no_implicit_optional = True
disallow_untyped_defs = True

# Care Plans:
[mypy-*.care_plans.*]
no_implicit_optional = True
disallow_untyped_defs = True

# Clinical Documentation:
[mypy-*.clinical_documentation.*]
no_implicit_optional = True
disallow_untyped_defs = True

# Common:
[mypy-*.common.*]
no_implicit_optional = True
disallow_untyped_defs = True

# Cron:
[mypy-*.cron.*]
no_implicit_optional = True
disallow_untyped_defs = True

# Crypto:
[mypy-*.crypto.*]
no_implicit_optional = True
disallow_untyped_defs = True

# Data Admin:
[mypy-*.data_admin.*]
no_implicit_optional = True
disallow_untyped_defs = True

# Direct Payment:
[mypy-*.direct_payment.*]
no_implicit_optional = True
disallow_untyped_defs = True

# Docs:
[mypy-*.docs.*]
no_implicit_optional = True
disallow_untyped_defs = True

# Dosespot:
[mypy-*.dosespot.*]
no_implicit_optional = True
disallow_untyped_defs = True

# Eligibility:
[mypy-*.eligibility.*]
no_implicit_optional = True
disallow_untyped_defs = True


# Geography:
[mypy-*.geography.*]
no_implicit_optional = True
disallow_untyped_defs = True


# health:
[mypy-*.health.*]
no_implicit_optional = True
disallow_untyped_defs = True


# Incentives:
[mypy-*.incentives.*]
no_implicit_optional = True
disallow_untyped_defs = True


# Learn:
[mypy-*.learn.*]
no_implicit_optional = True
disallow_untyped_defs = True

# maven_json:
[mypy-*.maven_json.*]
no_implicit_optional = True
disallow_untyped_defs = True

# maven_schemas:
[mypy-*.maven_schemas.*]
no_implicit_optional = True
disallow_untyped_defs = True

# members:
[mypy-*.members.*]
no_implicit_optional = True
disallow_untyped_defs = True

# Messaging:
[mypy-*.messaging.*]
no_implicit_optional = True
disallow_untyped_defs = True

# models:
[mypy-*.models.*]
no_implicit_optional = True
disallow_untyped_defs = True

# mpractice:
[mypy-*.mpractice.*]
no_implicit_optional = True
disallow_untyped_defs = True

# payer_accumulator:
[mypy-*.payer_accumulator.*]
no_implicit_optional = True
disallow_untyped_defs = True

# payments:
[mypy-*.payments.*]
no_implicit_optional = True
disallow_untyped_defs = True

# preferences:
[mypy-*.preferences.*]
no_implicit_optional = True
disallow_untyped_defs = True

# provider_matching:
[mypy-*.provider_matching.*]
no_implicit_optional = True
disallow_untyped_defs = True

# providers:
[mypy-*.providers.*]
no_implicit_optional = True
disallow_untyped_defs = True

# ------------------------------------------------------------------------------
