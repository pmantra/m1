proxy_hide_header x-view-name;

include /etc/nginx/mime.types;

include /etc/nginx/conf.d/status.conf;

sendfile on;
server_tokens off;

resolver kube-dns.kube-system.svc.cluster.local ipv6=off;

gzip              on;
gzip_http_version 1.0;
gzip_proxied      any;
gzip_min_length   500;
gzip_disable      "MSIE [1-6]\.";
gzip_types        text/plain text/xml text/css
                  text/comma-separated-values
                  text/javascript
                  application/x-javascript
                  application/atom+xml;

include _proxy_headers.conf;

# WARNING - please only add upstreams for existing 3rd party services instead of internal ones.
# The reason for this is that NGINX will crash if an upstream doesn't exist.
# Adding upstreams for internal services is an anti-pattern
# which makes the monolith less portable and harder
# to deploy into fresh environments like multiverse QA or local-dev.
# Instead, follow the patterns outlined throughout the NGINX files
# which set the url within the location blocks from an environment variable.
upstream gs {
    server storage.googleapis.com:443;
    keepalive 128;
}

# @see https://github.com/presslabs/gs-proxy/blob/master/nginx.conf
perl_set $api_authenticator 'sub { return $ENV{"AUTHENTICATOR_HOST"}; }';
perl_set $maven_web 'sub { return $ENV{"MAVEN_WEB_HOST"}; }';
perl_set $ajax_sessionizer 'sub { return $ENV{"SESSIONIZER_HOST"}; }';
perl_set $www 'sub { return $ENV{"WWW_HOST"}; }';
perl_set $sitemap_bucket 'sub { return $ENV{"SITEMAP_BUCKET"}; }';

perl_set $dd_client_token 'sub { return $ENV{"DD_CLIENT_TOKEN"}; }';
perl_set $environment_name 'sub { return $ENV{"ENVIRONMENT_SHORT_NAME"}; }';

# Secure headers
# Note that these will not be inherited in a context if *any* add_header directive is included in said context.
# If your context adds headers, you must add this line to the context as well.
include _security_headers.conf;

server {
    listen 10254;
    server_name _;

    access_log off;

    location /healthz {
        return 200;
    }
}
